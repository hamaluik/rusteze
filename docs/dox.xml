<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<class path="Array" params="T" file="/usr/share/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" get="inline" set="null" line="277">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="295">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/usr/share/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Enum" params="T" file="/usr/share/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/share/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/share/haxe/std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Math" params="" file="/usr/share/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="263" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="267" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="271" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
	</class>
	<class path="Std" params="" file="/usr/share/haxe/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/share/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
	</class>
	<class path="Type" params="" file="/usr/share/haxe/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
	</class>
	<class path="haxe.EnumTools" params="" file="/usr/share/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/share/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/share/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/share/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<enum path="haxe.ds.Option" params="T" file="/usr/share/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).

	@see https://haxe.org/manual/std-Option.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/share/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/share/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="/usr/share/haxe/std/haxe/io/Bytes.hx"><meta><m n=":keep"/></meta></class>
	<typedef path="haxe.io.BytesData" params="" file="/usr/share/haxe/std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<class path="rusteze.Macros" params="" file="src/rusteze/Macros.hx">
		<assert_ public="1" set="method" static="1">
			<f a="expr:extra">
				<x path="Bool"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Ensure that a boolean expression is `true` at runtime. Optionally provide a
     second parameter to use for a custom exception message

     ```haxe
     assert_(true);

     function some_computation(): Bool { return true; }
     assert_(some_computation());

     // assert_ with a custom message
     final x: Bool = true;
     assert_(x, "x wasn't true!");

     final a = 3; final b = 27;
     assert_(a + b == 30, 'a = $a, b = $b');
     ```

     @throws String if the provided expression cannot be evaluated to true at runtime
     @see https://doc.rust-lang.org/1.8.0/std/macro.assert!.html</haxe_doc>
		</assert_>
		<debug_assert_ public="1" set="method" static="1">
			<f a="expr:extra">
				<x path="Bool"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Ensure that a boolean expression is `true` at runtime. Optionally provide a
     second parameter to use for a custom exception message

     Unlike `assert_`, `debug_assert_` statements are only enabled if the Haxe compiler
     is invoked with the `-debug` flag. This makes `debug_assert_` useful for checks
     that are too expensive to be present in a release build but may be helpful
     during development.

     ```haxe
     assert_(true);

     function some_computation(): Bool { return true; }
     assert_(some_computation());

     // assert_ with a custom message
     final x: Bool = true;
     assert_(x, "x wasn't true!");

     final a = 3; final b = 27;
     assert_(a + b == 30, 'a = $a, b = $b');
     ```

     @throws String if the provided expression cannot be evaluated to true at runtime
     @see https://doc.rust-lang.org/1.8.0/std/macro.debug_assert!.html</haxe_doc>
		</debug_assert_>
		<assert_eq_ public="1" set="method" static="1">
			<f a="left:right">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Asserts that two expressions are equal to each other.

     ```haxe
     final a: Int = 3;
     final b: Int = 1 + 2;
     assert_eq_(a, b);
     ```

     @throws String the values of the expressions if the two are not equal to each other
     @see https://doc.rust-lang.org/1.8.0/std/macro.assert_eq!.html</haxe_doc>
		</assert_eq_>
		<debug_assert_eq_ public="1" set="method" static="1">
			<f a="left:right">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Asserts that two expressions are equal to each other.

     Unlike `assert_eq_`, `debug_assert_eq_` statements are only enabled if the Haxe compiler
     is invoked with the `-debug` flag. This makes `debug_assert_eq_` useful for checks
     that are too expensive to be present in a release build but may be helpful
     during development.

     ```haxe
     final a: Int = 3;
     final b: Int = 1 + 2;
     debug_assert_eq_(a, b);
     ```

     @throws String the values of the expressions if the two are not equal to each other
     @see https://doc.rust-lang.org/1.8.0/std/macro.assert_eq!.html</haxe_doc>
		</debug_assert_eq_>
		<env_ public="1" set="method" static="1">
			<f a="name">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Inspect an environment variable at compile time.

     This macro will expand to the value of the named environment variable at compile
     time, yielding an expression of type `String`.

     If the environment variable is not defined, then a compilation error will be
     emitted. To not emit a compile error, use the `option_env_` macro instead.

     ```haxe
     final path: String = env_("PATH");
     Sys.println("the $PATH variable at the time of compiling was: " + path);
     ```

     @see https://doc.rust-lang.org/std/macro.env.html</haxe_doc>
		</env_>
		<option_env_ public="1" set="method" static="1">
			<f a="name">
				<d/>
				<e path="rusteze.Option"><c path="String"/></e>
			</f>
			<haxe_doc><![CDATA[Optionally inspect an environment variable at compile time.

     If the named environment variable is present at compile time, this will expand
     into an expression of type `Option<String>` with a value of `Some`. If the
     environment variable is not present, then this will expand to `None`.

     A compile time error is never emitted when using this macro regardless of
     whether the environment variable is present or not.

     ```haxe
     final key: Option<String> = option_env_("SECRET_KEY");
     Sys.println("the secret key might be: " + Std.string(key));
     ```

     @see https://doc.rust-lang.org/std/macro.option_env.html]]></haxe_doc>
		</option_env_>
		<include_str_ public="1" set="method" static="1">
			<f a="path">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Includes a utf8-encoded file as a string.

     This macro will yield an expression of type `String` which is the contents
     of the filename specified. The file is located relative to the current file.

     File: `spanish.in`:

     ```
     adiós
     ```

     File: `Main.hx`:

     ```haxe
     class Main {
         public static function main() {
             final my_str = include_str_("spanish.in");
             assert_eq_(my_str, "adiós");
             println_("{}", my_str);
         }
     }
     ```

     @see https://doc.rust-lang.org/std/macro.include_str.html</haxe_doc>
		</include_str_>
		<include_bytes_ public="1" set="method" static="1">
			<f a="path">
				<d/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Includes a file as a byte array.
     
     This macro will yield an expression of type `haxe.io.Bytes` which is the contents
     of the filenae specified. THe file is located relative to the current file.

     @see https://doc.rust-lang.org/std/macro.include_bytes.html</haxe_doc>
		</include_bytes_>
		<concat_ public="1" set="method" static="1">
			<f a="e1:rest">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates literals into a static `String`
     
     This macro takes any number of comma-separated literals, yielding an expression
     of `String` which represents all of the literals concatenated left-to-right.

     Integer and floating point literals are stringified in order to be concatenated.

     ```haxe
     final s: String = concat_("test", 10, 'b', true);
     assert_eq_(s, "test10btrue");
     ```
     
     @see https://doc.rust-lang.org/std/macro.concat.html</haxe_doc>
		</concat_>
		<format_ public="1" set="method" static="1">
			<f a="format:args">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Creates a `String` using interpolation of runtime expressions.

     The first argument `format_` recieves is a format string. This must be a string
     literal. The power of the formatting string is in the `{}`s contained.

     Additional parameters passed to `format_` replace the `{}`s within the formatting
     string in the order given unless named or positional parameters are used, see
     `rusteze.fmt` for more information.

     A common use for `format_` is concatenation and interpolation of strings. The
     same convention is using with `print_` macros, depending on the intended destination
     of the string.

     **TODO:** indexed parameters, named parameters
     
     ```haxe
     format_("test");
     format_("hello {}", "world!");
     format_("x = {}, y = {}", 10, 30);
     ```

     @see https://doc.rust-lang.org/std/macro.format.html</haxe_doc>
		</format_>
		<print_ public="1" set="method" static="1">
			<f a="format:args">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Prints to the standard output.

     Equivalent to the `println_` macro except that a newline is not printed at the
     end of the message.

     Note that stdout is frequently line-buffered by default so it may be necessary
     to use `Sys.stdout().flush()` to ensure the output is emitted immediately.

     Use `print_` only for the primary output of your program. Use `eprint_` instead
     to print error and progress messatges.
     
     ```haxe
     print_("this ");
     print_("will ");
     print_("be ");
     print_("on ");
     print_("the ");
     print_("same ");
     print_("line ");
     ```

     @see https://doc.rust-lang.org/std/macro.print.html</haxe_doc>
		</print_>
		<println_ public="1" set="method" static="1">
			<f a="format:args">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Prints to the standard output, with a newline.

     On all platforms, the nweline is the LINE FEED character (`\n` / `U+000A`)
     alone (no additional CARRIAGE RETURN (`\r` / `U+000D`)).

     Use the `format+` syntax to write data to the standard output.

     Use `println+` only for the primary output of your program. Use `eprintln+`
     instead to print error and progress messages.

     ```haxe
     println_(''); // prints just a newline
     println_("hello there!");
     println_("format {} arguments", "some");
     ```

     @see https://doc.rust-lang.org/std/macro.println.html</haxe_doc>
		</println_>
		<eprint_ public="1" set="method" static="1">
			<f a="format:args">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Prints to the standard error.

     Equivalent to the `print_` macro, except that output goes to `Sys.stderr()`
     instead of `Sys.stdout()`. See `print_` for example usage.

     Use `eprint_` only for error and progress messaages. Use `print_` instead
     for the primary output of your program.

     ```haxe
     eprint("Error: Could not complete task")
     ```

     @see https://doc.rust-lang.org/std/macro.eprint.html</haxe_doc>
		</eprint_>
		<eprintln_ public="1" set="method" static="1">
			<f a="format:args">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Prints to the standard error, with a newline.

     Equivalent to the `println_` macro, except that output goes to `Sys.stderr()`
     instead of `Sys.stdout()`. See `println_` for example usage.

     Use `eprintln_` only for error and progress messaages. Use `println_` instead
     for the primary output of your program.

     ```haxe
     eprintln("Error: Could not complete task")
     ```

     @see https://doc.rust-lang.org/std/macro.eprintln.html</haxe_doc>
		</eprintln_>
		<dbg_ public="1" set="method" static="1">
			<f a="val:rest">
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc>This macro prints the value of each argument to `stderr` along with the source
     location of the macro invocation as well as the source code of the expression.

     The `dbg_` macro works exactly the same in release builds. This is useful when
     debugging issues that only occur in release builds or when debugging in release
     mode is significantly faster.

     Note that this macro is intended as debugging tool and therefore you should
     avoid having uses of it in version control for longer periods. Use cases involving
     debug output that should be added to version control are better served by
     proper logging utilities.

     @see https://doc.rust-lang.org/std/macro.dbg.html</haxe_doc>
		</dbg_>
		<try_ public="1" params="T:E" set="method" static="1">
			<f a="val">
				<e path="rusteze.Result">
					<c path="try_.T"/>
					<c path="try_.E"/>
				</e>
				<c path="try_.T"/>
			</f>
			<haxe_doc>Unwraps a result or propagtes its error.

     `try_` matches the given `Result`. In case of the `Ok` variant, the expression
     has the value of the wrapped value.

     In case of the `Err` variant, it retrieves the inner error. The resulting error
     is immediately returned.

     Because of the early return, `try_` can only be used in functions that return
     `Result`.

     @see https://doc.rust-lang.org/std/macro.try.html</haxe_doc>
		</try_>
		<todo_ public="1" set="method" static="1">
			<f a="message">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Indicates unfinished code.

     This can be useful if you are prototyping and are just looking to have your
     code typecheck.

     This is similar to `unimplemented_` but allows you to use a custom message.
     
     @throws String the `message` along with the file and location the message was generated

     @see https://doc.rust-lang.org/std/macro.todo.html</haxe_doc>
		</todo_>
		<unimplemented_ public="1" set="method" static="1">
			<f a=""><d/></f>
			<haxe_doc>Indicates unfinished code.

     This can be useful if you are prototyping and are just looking to have your
     code typecheck.

     This is similar to `todo_` but uses the standard message "unimplemented"
     
     @throws String "unimplemented" along with the file and location the message was generated

     @see https://doc.rust-lang.org/std/macro.unimplemented.html</haxe_doc>
		</unimplemented_>
		<haxe_doc>Haxe re-implementations of various Rust macros</haxe_doc>
	</class>
	<enum path="rusteze.Option" params="T" file="src/rusteze/Option.hx">
		<Some a="v"><c path="rusteze.Option.T"/></Some>
		<None/>
		<haxe_doc>An `Option` represents an optional value: every `Option` is either `Some` and
 contains a value, or `None`, and does not. 

 See `OptionTools` documentation for details.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"/>
			<m n=":generic"/>
			<m n=":using"><e>rusteze.OptionTools</e></m>
		</meta>
	</enum>
	<class path="rusteze.OptionTools" params="" file="src/rusteze/OptionTools.hx">
		<into_std public="1" params="T" get="inline" set="null" line="33" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="into_std.T"/></e>
				<e path="haxe.ds.Option"><c path="into_std.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Utility to convert a `ruzteze.Option<T>` into a `haxe.ds.Option<T>`
     @param self 
     @return Bool]]></haxe_doc>
		</into_std>
		<from_std public="1" params="T" get="inline" set="null" line="46" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="from_std.T"/></e>
				<e path="haxe.ds.Option"><c path="from_std.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Utility to convert a `haxe.ds.Option<T>` into a `rusteze.Option<T>`
     @param self 
     @return Bool]]></haxe_doc>
		</from_std>
		<into public="1" params="T" get="inline" set="null" line="60" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="into.T"/></e>
				<x path="Null"><c path="into.T"/></x>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Utility to convert a `rusteze.Option<T>` into a `Null<T>`, where `Some(v)`
     is mapped to `v` and `None` is mapped to `null`.
     @param self 
     @return Bool]]></haxe_doc>
		</into>
		<from public="1" params="T" get="inline" set="null" line="74" static="1">
			<f a="self">
				<x path="Null"><c path="from.T"/></x>
				<e path="haxe.ds.Option"><c path="from.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Utility to convert a `Null<T>` into a `rusteze.Option<T>`, where `null` is
     mapped to `None` and `v` is mapped to `Some(v)`
     @param self 
     @return Bool]]></haxe_doc>
		</from>
		<is_some public="1" params="T" get="inline" set="null" line="86" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="is_some.T"/></e>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if the option is a `Some` value
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some</haxe_doc>
		</is_some>
		<is_none public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="is_none.T"/></e>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if the option is a `None` value

     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none</haxe_doc>
		</is_none>
		<contains public="1" params="T" get="inline" set="null" line="112" static="1">
			<f a="self:x">
				<e path="haxe.ds.Option"><c path="contains.T"/></e>
				<c path="contains.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if the option is a `Some` value containing the given value

     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.contains</haxe_doc>
		</contains>
		<expect public="1" params="T" get="inline" set="null" line="126" static="1">
			<f a="self:msg">
				<e path="haxe.ds.Option"><c path="expect.T"/></e>
				<c path="String"/>
				<c path="expect.T"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Unwraps an option, yielding the content of a `Some`. Throws an exception if
     the value is a `None`, with a custom message provided by `msg`.

     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.expect</haxe_doc>
		</expect>
		<unwrap public="1" params="T" get="inline" set="null" line="141" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="unwrap.T"/></e>
				<c path="unwrap.T"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Moves the value `v` out of the `Option<T>` if it is `Some(v)`. In general,
     because this function may throw an exception, its use is discouraged. Instead,
     prefer to use pattern matching and handle the `None` case explicitely.

     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap]]></haxe_doc>
		</unwrap>
		<unwrap_or public="1" params="T" get="inline" set="null" line="156" static="1">
			<f a="self:def">
				<e path="haxe.ds.Option"><c path="unwrap_or.T"/></e>
				<c path="unwrap_or.T"/>
				<c path="unwrap_or.T"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns the contained value or a default. Arguments passed to `unwrap_or`
     are eagerly evaluated; if you are passing the result of a function call, it
     is recommended to use `unwrap_or_else`, which is lazily evaluated

     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or</haxe_doc>
		</unwrap_or>
		<unwrap_or_else public="1" params="T" get="inline" set="null" line="169" static="1">
			<f a="self:def">
				<e path="haxe.ds.Option"><c path="unwrap_or_else.T"/></e>
				<f a=""><c path="unwrap_or_else.T"/></f>
				<c path="unwrap_or_else.T"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns the contained value or computes it from a closure
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else</haxe_doc>
		</unwrap_or_else>
		<map public="1" params="I:O" get="inline" set="null" line="182" static="1">
			<f a="self:f">
				<e path="haxe.ds.Option"><c path="map.I"/></e>
				<f a="">
					<c path="map.I"/>
					<c path="map.O"/>
				</f>
				<e path="haxe.ds.Option"><c path="map.O"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Maps an `Option<T>` to `Option<U>` by applying a function to a contained value
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.map]]></haxe_doc>
		</map>
		<map_or public="1" params="I:O" get="inline" set="null" line="196" static="1">
			<f a="self:f:def">
				<e path="haxe.ds.Option"><c path="map_or.I"/></e>
				<f a="">
					<c path="map_or.I"/>
					<c path="map_or.O"/>
				</f>
				<c path="map_or.O"/>
				<c path="map_or.O"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Applies a function to the contained value (if any), or returns the provided
     default (if not).
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or</haxe_doc>
		</map_or>
		<map_or_else public="1" params="I:O" get="inline" set="null" line="210" static="1">
			<f a="self:f:def">
				<e path="haxe.ds.Option"><c path="map_or_else.I"/></e>
				<f a="">
					<c path="map_or_else.I"/>
					<c path="map_or_else.O"/>
				</f>
				<f a=""><c path="map_or_else.O"/></f>
				<c path="map_or_else.O"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Applies a function to the contained value (if any), or computes a default
     (if not).
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or_else</haxe_doc>
		</map_or_else>
		<ok_or public="1" params="T:E" get="inline" set="null" line="228" static="1">
			<f a="self:err">
				<e path="haxe.ds.Option"><c path="ok_or.T"/></e>
				<c path="ok_or.E"/>
				<e path="rusteze.Result">
					<c path="ok_or.T"/>
					<c path="ok_or.E"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)`
     and `None` to `Err(err)`.

     Arguments passed to `ok_or` are eagerly evaluated; if you are passing the result
     of a function call, it is recommended to use `ok_or_else`, which is lazily
     evaluated.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or]]></haxe_doc>
		</ok_or>
		<ok_or_else public="1" params="T:E" get="inline" set="null" line="242" static="1">
			<f a="self:err">
				<e path="haxe.ds.Option"><c path="ok_or_else.T"/></e>
				<f a=""><c path="ok_or_else.E"/></f>
				<e path="rusteze.Result">
					<c path="ok_or_else.T"/>
					<c path="ok_or_else.E"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to `Ok(v)`
     and `None` to `Err(err())`.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else]]></haxe_doc>
		</ok_or_else>
		<and public="1" params="T:U" get="inline" set="null" line="255" static="1">
			<f a="self:optb">
				<e path="haxe.ds.Option"><c path="and.T"/></e>
				<e path="haxe.ds.Option"><c path="and.U"/></e>
				<e path="haxe.ds.Option"><c path="and.U"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `None` if the option is `None`, otherwise returns `optb`.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.and</haxe_doc>
		</and>
		<and_then public="1" params="T:U" get="inline" set="null" line="271" static="1">
			<f a="self:f">
				<e path="haxe.ds.Option"><c path="and_then.T"/></e>
				<f a="value">
					<c path="and_then.T"/>
					<e path="haxe.ds.Option"><c path="and_then.U"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="and_then.U"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `None` if the option is `None`, otherwise calls `f` with the wrapped
     value and returns the results.

     Some languages call this operation _flatmap_.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then</haxe_doc>
		</and_then>
		<filter public="1" params="T" get="inline" set="null" line="292" static="1">
			<f a="self:predicate">
				<e path="haxe.ds.Option"><c path="filter.T"/></e>
				<f a="value">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="filter.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Returns `None` if the option is `None`, otherwise calls predicate with the
     wrapped value and returns:

     * `Some(t)` if `predicate` returns `true` (where `t` is the wrapped value), and
     * `None` if `predicate` returns `false`.

     This function works similar to `Iter.filter()`. You can imagine the `Option<T>`
     being an iterator over one or zero elements. `filter()` lets you decide which
     elements to keep
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.filter]]></haxe_doc>
		</filter>
		<or public="1" params="T" get="inline" set="null" line="308" static="1">
			<f a="self:optb">
				<e path="haxe.ds.Option"><c path="or.T"/></e>
				<e path="haxe.ds.Option"><c path="or.T"/></e>
				<e path="haxe.ds.Option"><c path="or.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns the option if it contains a value, otherwise returns `optb`.

     Arguments passed to `or` are eagerly evaluated; if you are passing the result
     of a function call, it is recommended to use `or_else`, which is lazily evaluated.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.or</haxe_doc>
		</or>
		<or_else public="1" params="T" get="inline" set="null" line="322" static="1">
			<f a="self:f">
				<e path="haxe.ds.Option"><c path="or_else.T"/></e>
				<f a=""><e path="haxe.ds.Option"><c path="or_else.T"/></e></f>
				<e path="haxe.ds.Option"><c path="or_else.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns the option if it contains a value, otherwise calls `f` and returns
     the result.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else</haxe_doc>
		</or_else>
		<xor public="1" params="T" get="inline" set="null" line="336" static="1">
			<f a="self:optb">
				<e path="haxe.ds.Option"><c path="xor.T"/></e>
				<e path="haxe.ds.Option"><c path="xor.T"/></e>
				<e path="haxe.ds.Option"><c path="xor.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `Some` if exactly one of `self`, `optb`, is `Some`, otherwise returns
     `None`.
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.xor</haxe_doc>
		</xor>
		<take params="T" get="inline" set="null" line="350" static="1">
			<f a="self">
				<e path="haxe.ds.Option"><c path="take.T"/></e>
				<e path="haxe.ds.Option"><c path="take.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Takes the value out of the option, leaving a `None` in its place
     
     @see https://doc.rust-lang.org/std/option/enum.Option.html#method.take</haxe_doc>
		</take>
		<haxe_doc>OptionTools are automatic static extensions on the `Option` enum providing numerous
 convenience functions such as `unwrap`, `is_some`, etc</haxe_doc>
		<meta><m n=":nullSafety"/></meta>
	</class>
	<enum path="rusteze.Result" params="T:E" file="src/rusteze/Result.hx">
		<Ok a="v"><c path="rusteze.Result.T"/></Ok>
		<Err a="e"><c path="rusteze.Result.E"/></Err>
		<haxe_doc>`Result` is a type that represents either success (`Ok`) or failure (`Err`).

 See `ResultTools` documentation for details.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":nullSafety"/>
			<m n=":generic"/>
			<m n=":using"><e>rusteze.ResultTools</e></m>
		</meta>
	</enum>
	<class path="rusteze.ResultTools" params="" file="src/rusteze/ResultTools.hx">
		<is_ok public="1" params="T:E" get="inline" set="null" line="40" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<c path="is_ok.T"/>
					<c path="is_ok.E"/>
				</e>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Returns `true` if the result is `Ok`

     ```haxe
     final x: Result<Int, String> = Ok(-3);
     assert_eq_(x.is_ok(), true);

     final x: Result<Int, String> = Err("Some error message");
     assert_eq_(x.is_ok(), false);
     ```

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok]]></haxe_doc>
		</is_ok>
		<is_err public="1" params="T:E" get="inline" set="null" line="53" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<c path="is_err.T"/>
					<c path="is_err.E"/>
				</e>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if the result is `Err`

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err</haxe_doc>
		</is_err>
		<contains public="1" params="T:E" get="inline" set="null" line="66" static="1">
			<f a="self:x">
				<e path="rusteze.Result">
					<c path="contains.T"/>
					<c path="contains.E"/>
				</e>
				<c path="contains.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if the result is an `Ok` value containing the given value

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.contains</haxe_doc>
		</contains>
		<contains_err public="1" params="T:E" get="inline" set="null" line="79" static="1">
			<f a="self:e">
				<e path="rusteze.Result">
					<c path="contains_err.T"/>
					<c path="contains_err.E"/>
				</e>
				<c path="contains_err.E"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `true` if the result is an `Ok` value containing the given value

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.contains_err</haxe_doc>
		</contains_err>
		<ok public="1" params="T:E" get="inline" set="null" line="95" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<c path="ok.T"/>
					<c path="ok.E"/>
				</e>
				<e path="rusteze.Option"><c path="ok.T"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Converts from `Result<T, E>` to `Option<T>`.

     Converts `self` into an `Option<T>`, consuming `self`, and discarding the
     error, if any.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.ok]]></haxe_doc>
		</ok>
		<err public="1" params="T:E" get="inline" set="null" line="111" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<c path="err.T"/>
					<c path="err.E"/>
				</e>
				<e path="rusteze.Option"><c path="err.E"/></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Converts from `Result<T, E>` to `Option<E>`.

     Converts `self` into an `Option<E>`, consuming `self`, and discarding the
     success value, if any.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.ok]]></haxe_doc>
		</err>
		<map public="1" params="T:E:U" get="inline" set="null" line="127" static="1">
			<f a="self:op">
				<e path="rusteze.Result">
					<c path="map.T"/>
					<c path="map.E"/>
				</e>
				<f a="v">
					<c path="map.T"/>
					<c path="map.U"/>
				</f>
				<e path="rusteze.Result">
					<c path="map.U"/>
					<c path="map.E"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained
     `Ok` value, leaving an `Err` value untouched.

     The function can be used to compose the results of two functions.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.map]]></haxe_doc>
		</map>
		<map_or public="1" params="T:E:U" get="inline" set="null" line="141" static="1">
			<f a="self:def:f">
				<e path="rusteze.Result">
					<c path="map_or.T"/>
					<c path="map_or.E"/>
				</e>
				<c path="map_or.U"/>
				<f a="v">
					<c path="map_or.T"/>
					<c path="map_or.U"/>
				</f>
				<c path="map_or.U"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Apples a function to the contained value (if any), or returns the provided
     default (if not).

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or</haxe_doc>
		</map_or>
		<map_or_else public="1" params="T:E:U" get="inline" set="null" line="158" static="1">
			<f a="self:def:f">
				<e path="rusteze.Result">
					<c path="map_or_else.T"/>
					<c path="map_or_else.E"/>
				</e>
				<f a="e">
					<c path="map_or_else.E"/>
					<c path="map_or_else.U"/>
				</f>
				<f a="v">
					<c path="map_or_else.T"/>
					<c path="map_or_else.U"/>
				</f>
				<c path="map_or_else.U"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Maps a `Result<T, E>` to `U` by applying a function to a contained `Ok` value,
     or a fallback function to a contained `Err` value.

     This function can be used to unpack a successful result while handling an
     error.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or_else]]></haxe_doc>
		</map_or_else>
		<map_err public="1" params="T:E:F" get="inline" set="null" line="175" static="1">
			<f a="self:op">
				<e path="rusteze.Result">
					<c path="map_err.T"/>
					<c path="map_err.E"/>
				</e>
				<f a="e">
					<c path="map_err.E"/>
					<c path="map_err.F"/>
				</f>
				<e path="rusteze.Result">
					<c path="map_err.T"/>
					<c path="map_err.F"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained
     `Err` value, leaving an `Ok` value untouched.

     This function can be used to pass through a successful result while handling
     an error.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err]]></haxe_doc>
		</map_err>
		<and public="1" params="T:E:U" get="inline" set="null" line="188" static="1">
			<f a="self:res">
				<e path="rusteze.Result">
					<c path="and.T"/>
					<c path="and.E"/>
				</e>
				<e path="rusteze.Result">
					<c path="and.U"/>
					<c path="and.E"/>
				</e>
				<e path="rusteze.Result">
					<c path="and.U"/>
					<c path="and.E"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.and</haxe_doc>
		</and>
		<and_then public="1" params="T:E:U" get="inline" set="null" line="203" static="1">
			<f a="self:op">
				<e path="rusteze.Result">
					<c path="and_then.T"/>
					<c path="and_then.E"/>
				</e>
				<f a="v">
					<c path="and_then.T"/>
					<e path="rusteze.Result">
						<c path="and_then.U"/>
						<c path="and_then.E"/>
					</e>
				</f>
				<e path="rusteze.Result">
					<c path="and_then.U"/>
					<c path="and_then.E"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.

     This function can be used for control flow based on `Result` values.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then</haxe_doc>
		</and_then>
		<or public="1" params="T:E:F" get="inline" set="null" line="219" static="1">
			<f a="self:res">
				<e path="rusteze.Result">
					<c path="or.T"/>
					<c path="or.E"/>
				</e>
				<e path="rusteze.Result">
					<c path="or.T"/>
					<c path="or.F"/>
				</e>
				<e path="rusteze.Result">
					<c path="or.T"/>
					<c path="or.F"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.

     Arguments passed to `or` are eagerly evaluated; if you are passing the result
     of a function call, it is recommended to use `or_else`, which is lazily evaluated.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.or</haxe_doc>
		</or>
		<or_else public="1" params="T:E:F" get="inline" set="null" line="234" static="1">
			<f a="self:op">
				<e path="rusteze.Result">
					<c path="or_else.T"/>
					<c path="or_else.E"/>
				</e>
				<f a="e">
					<c path="or_else.E"/>
					<e path="rusteze.Result">
						<c path="or_else.T"/>
						<c path="or_else.F"/>
					</e>
				</f>
				<e path="rusteze.Result">
					<c path="or_else.T"/>
					<c path="or_else.F"/>
				</e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.

     This function can be used for control flow based on result values.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else</haxe_doc>
		</or_else>
		<unwrap_or public="1" params="T:E" get="inline" set="null" line="251" static="1">
			<f a="self:optb">
				<e path="rusteze.Result">
					<c path="unwrap_or.T"/>
					<c path="unwrap_or.E"/>
				</e>
				<c path="unwrap_or.T"/>
				<c path="unwrap_or.T"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Unwraps a result, yielding the content of an `Ok`. Else, it returns `optb`.

     Arugments passed to `unwrap_or` are eagerly evaluated; if you are passing the
     result of a function call, it is recommended to use `unwrap_or_else`, which
     is lazily evaluated.

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or</haxe_doc>
		</unwrap_or>
		<unwrap_or_else public="1" params="T:E" get="inline" set="null" line="271" static="1">
			<f a="self:op">
				<e path="rusteze.Result">
					<c path="unwrap_or_else.T"/>
					<c path="unwrap_or_else.E"/>
				</e>
				<f a="e">
					<c path="unwrap_or_else.E"/>
					<c path="unwrap_or_else.T"/>
				</f>
				<c path="unwrap_or_else.T"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc>Unwraps a result, yielding the content of an `Ok`. If the value is an `Err`
     then it calls `op` with its value.

     ```haxe
     function count(x: String): Int { return x.length }
     assert_eq_(Ok(2).unwrap_or_else(count), 2);
     assert_eq_(Err("foo").unwrap_or_else(count), 3);
     ```

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else</haxe_doc>
		</unwrap_or_else>
		<unwrap public="1" params="V:E" get="inline" set="null" line="295" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<c path="unwrap.V"/>
					<c path="unwrap.E"/>
				</e>
				<c path="unwrap.V"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Unwraps a result, yielding the content of an `Ok`.

     ```haxe
     final x: Result<Int, String> = Ok(2);
     assert_eq_(x.unwrap(), 2);
     ```

     ```haxe
     final x: Result<Int, String> = Err("emergency failure");
     x.unwrap(); // throws `emergency failure`
     ```

     @throws String if the value is an `Err`, with a panic message provided by the `Err`'s value.
     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap]]></haxe_doc>
		</unwrap>
		<expect public="1" params="V:E" get="inline" set="null" line="314" static="1">
			<f a="self:msg">
				<e path="rusteze.Result">
					<c path="expect.V"/>
					<c path="expect.E"/>
				</e>
				<c path="String"/>
				<c path="expect.V"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Unwraps a result, yielding the content of an `Ok`.

     ```haxe
     final x: Result<Int, String> = Err("emergency failure");
     x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
     ```

     @throws String if the value is an `Err`, with a panic message including the passed message, and the content of the `Err`.
     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.expect]]></haxe_doc>
		</expect>
		<unwrap_err public="1" params="T:E" get="inline" set="null" line="338" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<c path="unwrap_err.T"/>
					<c path="unwrap_err.E"/>
				</e>
				<c path="unwrap_err.E"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Unwraps a result, yielding the content of an `Err`.

     ```haxe
     final x: Result<Int, String> = Ok(2);
     x.unwrap_err(); // panics with `2`
     ```

     ```haxe
     final x: Result<Int, String> = Err("emergency failure");
     assert_eq_(x.unwrap_err(), "emergency failure");
     ```

     @throws String if the value is an `Ok`, with a panic message provided by the `Ok`'s value.
     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_err]]></haxe_doc>
		</unwrap_err>
		<expect_err public="1" params="V:E" get="inline" set="null" line="357" static="1">
			<f a="self:msg">
				<e path="rusteze.Result">
					<c path="expect_err.V"/>
					<c path="expect_err.E"/>
				</e>
				<c path="String"/>
				<c path="expect_err.E"/>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Unwraps a result, yielding the content of an `Err`.

     ```haxe
     final x: Result<Int, String> = Ok(10);
     x.expect("Testing expect_err"); // panics with `Testing expect_err: 10`
     ```

     @throws String if the value is an `Err`, with a panic message including the passed message, and the content of the `Err`.
     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.expect]]></haxe_doc>
		</expect_err>
		<transpose public="1" params="T:E" get="inline" set="null" line="379" static="1">
			<f a="self">
				<e path="rusteze.Result">
					<e path="rusteze.Option"><c path="transpose.T"/></e>
					<c path="transpose.E"/>
				</e>
				<e path="rusteze.Option"><e path="rusteze.Result">
	<c path="transpose.T"/>
	<c path="transpose.E"/>
</e></e>
			</f>
			<meta><m n=":generic"/></meta>
			<haxe_doc><![CDATA[Transposes a `Result` of an `Option` into an `Option` of a `Result`.

     `Ok(None)` will be mapped to `None`.
     `Ok(Some(_))` and `Err(_)` will be mapped to `Some(Ok(_))` and `Some(Err(_))`.

     ```haxe
     final x: Result<Option<Int>, String> = Ok(Some(5));
     final y: Option<Result<Int, String>> = Some(Ok(5));
     assert_eq_(x.transpose(), y);
     ```

     @see https://doc.rust-lang.org/std/result/enum.Result.html#method.transpose]]></haxe_doc>
		</transpose>
		<haxe_doc>ResultTools are automatic static extensions on the `Result` enum providing numerous
 convenience functions such as `unwrap`, `is_ok`, etc</haxe_doc>
		<meta><m n=":nullSafety"/></meta>
	</class>
	<class path="rusteze.iter.IterBase" params="T" file="src/rusteze/iter/IterBase.hx">
		<iter final="1"><t path="Iterator"><c path="rusteze.iter.IterBase.T"/></t></iter>
		<size_hint public="1" set="method" line="45">
			<f a=""><a>
	<min><x path="Int"/></min>
	<max><e path="rusteze.Option"><x path="Int"/></e></max>
</a></f>
			<haxe_doc>Returns the bounds on the remaining length of the iterator.

     @see https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.size_hint</haxe_doc>
		</size_hint>
		<last public="1" set="method" line="53">
			<f a=""><e path="rusteze.Option"><c path="rusteze.iter.IterBase.T"/></e></f>
			<haxe_doc><![CDATA[Consumes the iterator, returning the last element
     @return Option<T>]]></haxe_doc>
		</last>
		<count public="1" set="method" line="66">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Consumes the iterator, counting the number of iterations and returning it.

     This method will call `hasNext` and `next` repeatedly until `hasNext` returns
     `false`. Note that `next` has to be called at least once even if the iterator
     does not have any elements.
     
     @see https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count</haxe_doc>
		</count>
		<map public="1" params="U" set="method" line="90">
			<f a="f">
				<f a="item">
					<c path="rusteze.iter.IterBase.T"/>
					<c path="map.U"/>
				</f>
				<c path="rusteze.iter.Map">
					<c path="rusteze.iter.IterBase.T"/>
					<c path="map.U"/>
				</c>
			</f>
			<haxe_doc>Takes a closure and creates an iterator which calls that closure on each
     element.

     `map()` transforms one iterator into another, by means of its argument: a
     callback. It produces a new iterator which calls this closure on each element
     of the original iterator.

     If you are good at thinking in types, you can think of `map()` like this:
     If you have an iterator that gives you elements of some type `A`, and you
     want an iterator of some other type `B`, you can use `map()`, passing a
     closure that takes an `A` and returns a `B`.

     `map()` is conceptually similar to a `for` loop. However, as `map()` is lazy,
     it is best used when you're already working with other iterators. If you're
     doing some sort of looping for a side effect, it's considered more idiomatic
     to use `for` than `map()`.
     
     @see https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map</haxe_doc>
		</map>
		<fold public="1" params="U" set="method" line="117">
			<f a="init:f">
				<c path="fold.U"/>
				<f a="accumulator:element">
					<c path="fold.U"/>
					<c path="rusteze.iter.IterBase.T"/>
					<c path="fold.U"/>
				</f>
				<c path="fold.U"/>
			</f>
			<haxe_doc>An iterator method that applies a function, producing a single, final value.
    
     `fold()` takes two arguments: an initial value, and a closure with two arguments:
     an 'accumulator', and an element. The closure returns the value that the accumulator
     should have for the next iteration.

     The initial value is the value the accumulator will have on the first call.

     After applying this closure to every element of the iterator, `fold()` returns
     the accumulator.

     This operation is sometimes called 'reduce' or 'inject'.

     Folding is useful whenever you have a collection of something, and want to
     produce a single value from it.

     Note: `fold()`, and similar methods that traverse the entire iterator, may
     not terminate for infinite iterators, even on iterators for which a result
     is determinable in finit time.
     
     @see https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold</haxe_doc>
		</fold>
		<new public="1" set="method" line="36">
			<f a="iter">
				<t path="Iterator"><c path="rusteze.iter.IterBase.T"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new iterator from an Std iterator
     @param iter</haxe_doc>
		</new>
		<meta>
			<m n=":generic"/>
			<m n=":keep"/>
			<m n=":nullSafety"/>
		</meta>
	</class>
	<class path="rusteze.iter.Iter" params="T" file="src/rusteze/iter/Iter.hx">
		<extends path="rusteze.iter.IterBase"><c path="rusteze.iter.Iter.T"/></extends>
		<hasNext public="1" get="inline" set="null" line="35"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="39"><f a=""><c path="rusteze.iter.Iter.T"/></f></next>
		<new public="1" set="method" line="31"><f a="iter">
	<t path="Iterator"><c path="rusteze.iter.Iter.T"/></t>
	<x path="Void"/>
</f></new>
		<haxe_doc>A basic iterator

 @see `IterBase`
 @see https://doc.rust-lang.org/std/iter/index.html#implementing-iterator</haxe_doc>
		<meta>
			<m n=":generic"/>
			<m n=":keep"/>
			<m n=":nullSafety"/>
		</meta>
	</class>
	<class path="rusteze.iter.Map" params="T:B" file="src/rusteze/iter/Map.hx">
		<extends path="rusteze.iter.IterBase"><c path="rusteze.iter.Map.T"/></extends>
		<f final="1"><f a="item">
	<c path="rusteze.iter.Map.T"/>
	<c path="rusteze.iter.Map.B"/>
</f></f>
		<hasNext public="1" get="inline" set="null" line="40"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="44"><f a=""><c path="rusteze.iter.Map.B"/></f></next>
		<new public="1" set="method" line="35"><f a="iter:f">
	<t path="Iterator"><c path="rusteze.iter.Map.T"/></t>
	<f a="item">
		<c path="rusteze.iter.Map.T"/>
		<c path="rusteze.iter.Map.B"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc>An iterator that maps the values of `iter` with `f`.

 This class is created by the `map` method on `Iter`. See its documentation for more.

 @see `Iter`
 @see https://doc.rust-lang.org/std/iter/struct.Map.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":generic"/>
			<m n=":keep"/>
			<m n=":nullSafety"/>
		</meta>
	</class>
</haxe>